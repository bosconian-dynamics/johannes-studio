{"ast":null,"code":"import { createSlice as createReduxSlice } from \"@reduxjs/toolkit\";\n\nconst defaultReducer = (state, action) => {\n  return state;\n};\n\nconst attachChildSlices = (parent, slices) => Object.values(slices).reduce((children, slice) => {\n  const name = slice.name;\n  slice = Object.assign({}, slice);\n\n  if (parent.children[name]) {\n    console.warn(`Slice \"${name}\" already registered as a child to this slice.`);\n    return children;\n  }\n\n  console.log(\"ATTACH CHILD SLICE\", slice); //slice.parent = parent;\n  //slice.path.unshift(parent.name);\n\n  children[name] = slice;\n  parent.children[name] = slice;\n  parent.initial_state[name] = { ...parent.initial_state[name],\n    ...slice.initial_state\n  };\n  return children;\n}, {});\n\nexport const createSlice = (name, options = {}) => {\n  const {\n    children = {},\n    extra_reducers = {},\n    initial_state = {},\n    path = [name],\n    selectors = {},\n    ...slice_options\n  } = options;\n  const child_actions = {};\n  const child_reducers = {};\n  if (Array.isArray(children)) children = Object.fromEntries(Object.entries(children));\n\n  for (const child of Object.values(children)) {\n    child_reducers[child.name] = child.reducer;\n    child_actions[child.name] = child.actions;\n  }\n\n  const redux_slice = createReduxSlice({ ...slice_options,\n    name,\n    initialState: initial_state,\n    reducers: options.reducers,\n    extraReducers: builder => {\n      // Add every child slice's reducer as an RTK \"extra reducer\" (so RTK doesn't generate actions for them).\n      for (const [name, reducer] of Object.entries(child_reducers)) builder.addCase(name, reducer); // Add any extra reducers from the options object...\n\n\n      if (Array.isArray(extra_reducers)) {\n        // If the option is an array, assume it to be an array of RTK builder callbacks.\n        for (const [reducerBuilder] of extra_reducers) reducerBuilder(builder);\n      } else if (typeof extra_reducers === \"function\") {\n        // If the options is a function, assume it to be a builder callback.\n        extra_reducers(builder);\n      } else if (typeof extra_reducers === \"object\") {\n        // Add name/reducer mappings directly.\n        for (const [name, reducer] of Object.entries(extra_reducers)) builder.addCase(name, reducer);\n      } else {\n        throw new TypeError(\"Unknown extra_reducers format\");\n      }\n\n      builder.addDefaultCase(defaultReducer);\n    }\n  });\n  const slice = {\n    actions: { ...child_actions,\n      ...redux_slice.actions\n    },\n    case_reducers: redux_slice.caseReducers,\n    children: {},\n    initial_state,\n    name,\n    parent: null,\n    path,\n    reducer: redux_slice.reducer,\n    selectors\n  };\n  slice.attach = attachChildSlices.bind(null, slice);\n  console.log(\"check 3\");\n  attachChildSlices(slice, children);\n  console.log(\"check 4\");\n  return slice;\n};","map":{"version":3,"sources":["/sandbox/src/lib/data/slice/createSlice.js"],"names":["createSlice","createReduxSlice","defaultReducer","state","action","attachChildSlices","parent","slices","Object","values","reduce","children","slice","name","assign","console","warn","log","initial_state","options","extra_reducers","path","selectors","slice_options","child_actions","child_reducers","Array","isArray","fromEntries","entries","child","reducer","actions","redux_slice","initialState","reducers","extraReducers","builder","addCase","reducerBuilder","TypeError","addDefaultCase","case_reducers","caseReducers","attach","bind"],"mappings":"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","sourcesContent":["import { createSlice as createReduxSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst defaultReducer = (state, action) => {\r\n  return state;\r\n};\r\n\r\nconst attachChildSlices = (parent, slices) =>\r\n  Object.values(slices).reduce((children, slice) => {\r\n    const name = slice.name;\r\n\r\n    slice = Object.assign({}, slice);\r\n\r\n    if (parent.children[name]) {\r\n      console.warn(\r\n        `Slice \"${name}\" already registered as a child to this slice.`\r\n      );\r\n      return children;\r\n    }\r\n\r\n    console.log(\"ATTACH CHILD SLICE\", slice);\r\n\r\n    //slice.parent = parent;\r\n    //slice.path.unshift(parent.name);\r\n\r\n    children[name] = slice;\r\n\r\n    parent.children[name] = slice;\r\n    parent.initial_state[name] = {\r\n      ...parent.initial_state[name],\r\n      ...slice.initial_state\r\n    };\r\n\r\n    return children;\r\n  }, {});\r\n\r\nexport const createSlice = (name, options = {}) => {\r\n  const {\r\n    children = {},\r\n    extra_reducers = {},\r\n    initial_state = {},\r\n    path = [name],\r\n    selectors = {},\r\n    ...slice_options\r\n  } = options;\r\n  const child_actions = {};\r\n  const child_reducers = {};\r\n\r\n  if(Array.isArray(children))\r\n    children = Object.fromEntries(Object.entries(children));\r\n\r\n  for (const child of Object.values(children)) {\r\n    child_reducers[child.name] = child.reducer;\r\n    child_actions[child.name] = child.actions;\r\n  }\r\n\r\n  const redux_slice = createReduxSlice({\r\n    ...slice_options,\r\n    name,\r\n    initialState: initial_state,\r\n    reducers: options.reducers,\r\n    extraReducers: (builder) => {\r\n      // Add every child slice's reducer as an RTK \"extra reducer\" (so RTK doesn't generate actions for them).\r\n      for (const [name, reducer] of Object.entries(child_reducers))\r\n        builder.addCase(name, reducer);\r\n\r\n      // Add any extra reducers from the options object...\r\n      if (Array.isArray(extra_reducers)) {\r\n        // If the option is an array, assume it to be an array of RTK builder callbacks.\r\n        for (const [reducerBuilder] of extra_reducers) reducerBuilder(builder);\r\n      } else if (typeof extra_reducers === \"function\") {\r\n        // If the options is a function, assume it to be a builder callback.\r\n        extra_reducers(builder);\r\n      } else if (typeof extra_reducers === \"object\") {\r\n        // Add name/reducer mappings directly.\r\n        for (const [name, reducer] of Object.entries(extra_reducers))\r\n          builder.addCase(name, reducer);\r\n      } else {\r\n        throw new TypeError(\"Unknown extra_reducers format\");\r\n      }\r\n\r\n      builder.addDefaultCase(defaultReducer);\r\n    }\r\n  });\r\n\r\n  const slice = {\r\n    actions: {\r\n      ...child_actions,\r\n      ...redux_slice.actions\r\n    },\r\n    case_reducers: redux_slice.caseReducers,\r\n    children: {},\r\n    initial_state,\r\n    name,\r\n    parent: null,\r\n    path,\r\n    reducer: redux_slice.reducer,\r\n    selectors\r\n  };\r\n\r\n  slice.attach = attachChildSlices.bind(null, slice);\r\n\r\n  console.log(\"check 3\");\r\n\r\n  attachChildSlices(slice, children);\r\n\r\n  console.log(\"check 4\");\r\n\r\n  return slice;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}