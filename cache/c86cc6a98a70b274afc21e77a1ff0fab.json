{"ast":null,"code":"import { createSlice as createReduxSlice } from \"@reduxjs/toolkit\";\n\nconst defaultReducer = (state, action) => {\n  return state;\n};\n\nconst attachChildSlices = (parent, slices) => Object.entries(slices).reduce((children, slice) => {\n  const name = slice.name;\n\n  if (parent.children[name]) {\n    console.warn(`Slice \"${name}\" already registered as a child to this slice.`);\n    return children;\n  }\n\n  slice.parent = parent;\n  slice.path.unshift(parent.name);\n  children[name] = slice;\n  parent.children[name] = slice;\n  parent.initial_state[name] = { ...parent.initial_state[name],\n    ...slice.initial_state\n  };\n  return children;\n}, {});\n\nexport const createSlice = (name, options = {}) => {\n  const {\n    children = {},\n    extra_reducers = {},\n    initial_state = {},\n    path = [name],\n    selectors = {},\n    ...slice_options\n  } = options;\n  const child_actions = {};\n  const child_reducers = {};\n\n  for (const child of Object.values(children)) {\n    child_reducers[child.name] = child.reducer;\n    child_actions[child.name] = child.actions;\n  }\n\n  const redux_slice = createReduxSlice({ ...slice_options,\n    name,\n    initialState: initial_state,\n    reducers: options.reducers,\n    extraReducers: builder => {\n      for (const [name, reducer] of Object.entires(child_reducers)) builder.addCase(name, reducer);\n\n      if (extra_reducers instanceof Array) {\n        for (const [reducerBuilder] of extra_reducers) reducerBuilder(builder);\n      } else if (typeof extra_reducers === \"function\") {\n        extra_reducers(builder);\n      } else if (typeof extra_reducers === \"object\") {\n        for (const [name, reducer] of Object.entries(extra_reducers)) builder.addCase(name, reducer);\n      } else {\n        throw new TypeError(\"Unknown extra_reducers format\");\n      }\n\n      builder.addDefaultCase(defaultReducer);\n    }\n  });\n  const slice = {\n    actions: { ...child_actions,\n      ...redux_slice.actions\n    },\n    case_reducers: redux_slice.caseReducers,\n    children: {},\n    initial_state,\n    name,\n    parent: null,\n    path,\n    reducer: redux_slice.reducer,\n    selectors\n  };\n  attachChildSlices(slice, children);\n  return slice;\n};","map":{"version":3,"sources":["/sandbox/src/lib/data/slice/createSlice.js"],"names":["createSlice","createReduxSlice","defaultReducer","state","action","attachChildSlices","parent","slices","Object","entries","reduce","children","slice","name","console","warn","path","unshift","initial_state","options","extra_reducers","selectors","slice_options","child_actions","child_reducers","child","values","reducer","actions","redux_slice","initialState","reducers","extraReducers","builder","entires","addCase","Array","reducerBuilder","TypeError","addDefaultCase","case_reducers","caseReducers"],"mappings":"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","sourcesContent":["import { createSlice as createReduxSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst defaultReducer = (state, action) => {\r\n  return state;\r\n};\r\n\r\nconst attachChildSlices = (parent, slices) =>\r\n  Object.entries(slices).reduce((children, slice) => {\r\n    const name = slice.name;\r\n\r\n    if (parent.children[name]) {\r\n      console.warn(\r\n        `Slice \"${name}\" already registered as a child to this slice.`\r\n      );\r\n      return children;\r\n    }\r\n\r\n    slice.parent = parent;\r\n    slice.path.unshift(parent.name);\r\n\r\n    children[name] = slice;\r\n\r\n    parent.children[name] = slice;\r\n    parent.initial_state[name] = {\r\n      ...parent.initial_state[name],\r\n      ...slice.initial_state\r\n    };\r\n\r\n    return children;\r\n  }, {});\r\n\r\nexport const createSlice = (name, options = {}) => {\r\n  const {\r\n    children = {},\r\n    extra_reducers = {},\r\n    initial_state = {},\r\n    path = [name],\r\n    selectors = {},\r\n    ...slice_options\r\n  } = options;\r\n\r\n  const child_actions = {};\r\n  const child_reducers = {};\r\n\r\n  for (const child of Object.values(children)) {\r\n    child_reducers[child.name] = child.reducer;\r\n    child_actions[child.name] = child.actions;\r\n  }\r\n\r\n  const redux_slice = createReduxSlice({\r\n    ...slice_options,\r\n    name,\r\n    initialState: initial_state,\r\n    reducers: options.reducers,\r\n    extraReducers: (builder) => {\r\n      for (const [name, reducer] of Object.entires(child_reducers))\r\n        builder.addCase(name, reducer);\r\n\r\n      if (extra_reducers instanceof Array) {\r\n        for (const [reducerBuilder] of extra_reducers) reducerBuilder(builder);\r\n      } else if (typeof extra_reducers === \"function\") {\r\n        extra_reducers(builder);\r\n      } else if (typeof extra_reducers === \"object\") {\r\n        for (const [name, reducer] of Object.entries(extra_reducers))\r\n          builder.addCase(name, reducer);\r\n      } else {\r\n        throw new TypeError(\"Unknown extra_reducers format\");\r\n      }\r\n\r\n      builder.addDefaultCase(defaultReducer);\r\n    }\r\n  });\r\n\r\n  const slice = {\r\n    actions: {\r\n      ...child_actions,\r\n      ...redux_slice.actions\r\n    },\r\n    case_reducers: redux_slice.caseReducers,\r\n    children: {},\r\n    initial_state,\r\n    name,\r\n    parent: null,\r\n    path,\r\n    reducer: redux_slice.reducer,\r\n    selectors\r\n  };\r\n\r\n  attachChildSlices(slice, children);\r\n\r\n  return slice;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}