{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createElement } from \"@wordpress/element\";\nimport { useEffect, useState } from \"@wordpress/element\";\nimport BlockEditor from \"./scenes/block-editor/index\";\nimport \"./style.scss\";\n\nconst loadScenes = async (...names) => Promise.all(names.map(name => import(`./scenes/${name}`)));\n\nexport const useScenes = (...scenes_or_names) => {\n  _s();\n\n  const [scenes, setScenes] = useState({});\n  useEffect(() => (async () => {\n    for (const scene_or_name of scenes_or_names) {\n      getScene(scene_or_name);\n    }\n  })(), [scenes_or_names]);\n\n  const getScene = async scene_or_name => {\n    if (\"string\" === typeof scene_or_name) {\n      if (scenes[scene_or_name]) return scenes[scene_or_name];\n\n      try {\n        const [scene] = await loadScenes(scene_or_name);\n        return setScene(scene, scene_or_name);\n      } catch (err) {\n        console.error(`No such scene: \"${scene_or_name}\"`);\n        return;\n      }\n    }\n\n    const scene = scenes.find(scene_or_name);\n    if (scene) return scene;\n    return setScene(scene);\n  };\n\n  const setScene = (scene, name) => {\n    if (!name) name = scene.displayName;\n    setScenes({\n      [name]: scene\n    });\n    return scene;\n  };\n\n  return {\n    scenes,\n    getScene,\n    get: getScene,\n    setScene,\n    set: setScene\n  };\n};\n\n_s(useScenes, \"3Cg0qwfb22N5e8zLZUxPGOHWRVs=\");\n\nexport function App() {\n  _s2();\n\n  const {\n    scenes\n  } = useScenes(\"BlockEditor\");\n  return createElement(\"div\", {\n    className: \"app\"\n  }, createElement(\"header\", null, createElement(\"h2\", null, \"Berlin Editor\")), scenes);\n}\n\n_s2(App, \"1R41xH6om+1igwDaWfof0Ymh0e8=\", false, function () {\n  return [useScenes];\n});\n\n_c = App;\nexport default App;\n/* export default () => (\r\n  <div className=\"app\">\r\n    <h1>{process.env.SANDBOX_URL}</h1>\r\n  </div>\r\n); */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/sandbox/src/App.jsx"],"names":["useEffect","useState","BlockEditor","loadScenes","names","Promise","all","map","name","useScenes","scenes_or_names","scenes","setScenes","scene_or_name","getScene","scene","setScene","err","console","error","find","displayName","get","set","App"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AAEA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,OAAO,cAAP;;AAEA,MAAMC,UAAU,GAAG,OAAO,GAAGC,KAAV,KACjBC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU,OAAQ,YAAWA,IAAK,EAAxB,CAApB,CAAZ,CADF;;AAGA,OAAO,MAAMC,SAAS,GAAG,CAAC,GAAGC,eAAJ,KAAwB;AAAA;;AAC/C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CACP,MACE,CAAC,YAAY;AACX,SAAK,MAAMa,aAAX,IAA4BH,eAA5B,EAA6C;AAC3CI,MAAAA,QAAQ,CAACD,aAAD,CAAR;AACD;AACF,GAJD,GAFK,EAOP,CAACH,eAAD,CAPO,CAAT;;AAUA,QAAMI,QAAQ,GAAG,MAAOD,aAAP,IAAyB;AACxC,QAAI,aAAa,OAAOA,aAAxB,EAAuC;AACrC,UAAIF,MAAM,CAACE,aAAD,CAAV,EAA2B,OAAOF,MAAM,CAACE,aAAD,CAAb;;AAE3B,UAAI;AACF,cAAM,CAACE,KAAD,IAAU,MAAMZ,UAAU,CAACU,aAAD,CAAhC;AAEA,eAAOG,QAAQ,CAACD,KAAD,EAAQF,aAAR,CAAf;AACD,OAJD,CAIE,OAAOI,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAe,mBAAkBN,aAAc,GAA/C;AACA;AACD;AACF;;AAED,UAAME,KAAK,GAAGJ,MAAM,CAACS,IAAP,CAAYP,aAAZ,CAAd;AAEA,QAAIE,KAAJ,EAAW,OAAOA,KAAP;AAEX,WAAOC,QAAQ,CAACD,KAAD,CAAf;AACD,GAnBD;;AAqBA,QAAMC,QAAQ,GAAG,CAACD,KAAD,EAAQP,IAAR,KAAiB;AAChC,QAAI,CAACA,IAAL,EAAWA,IAAI,GAAGO,KAAK,CAACM,WAAb;AAEXT,IAAAA,SAAS,CAAC;AAAE,OAACJ,IAAD,GAAQO;AAAV,KAAD,CAAT;AAEA,WAAOA,KAAP;AACD,GAND;;AAQA,SAAO;AACLJ,IAAAA,MADK;AAELG,IAAAA,QAFK;AAGLQ,IAAAA,GAAG,EAAER,QAHA;AAILE,IAAAA,QAJK;AAKLO,IAAAA,GAAG,EAAEP;AALA,GAAP;AAOD,CAjDM;;GAAMP,S;;AAmDb,OAAO,SAASe,GAAT,GAAe;AAAA;;AACpB,QAAM;AAAEb,IAAAA;AAAF,MAAaF,SAAS,CAAC,aAAD,CAA5B;AAEA,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,8BACE,0CADF,CADF,EAIGE,MAJH,CADF;AAQD;;IAXea,G;UACKf,S;;;KADLe,G;AAahB,eAAeA,GAAf;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { useEffect, useState } from \"@wordpress/element\";\r\n\r\nimport BlockEditor from \"./scenes/block-editor/index\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst loadScenes = async (...names) =>\r\n  Promise.all(names.map((name) => import(`./scenes/${name}`)));\r\n\r\nexport const useScenes = (...scenes_or_names) => {\r\n  const [scenes, setScenes] = useState({});\r\n\r\n  useEffect(\r\n    () =>\r\n      (async () => {\r\n        for (const scene_or_name of scenes_or_names) {\r\n          getScene(scene_or_name);\r\n        }\r\n      })(),\r\n    [scenes_or_names]\r\n  );\r\n\r\n  const getScene = async (scene_or_name) => {\r\n    if (\"string\" === typeof scene_or_name) {\r\n      if (scenes[scene_or_name]) return scenes[scene_or_name];\r\n\r\n      try {\r\n        const [scene] = await loadScenes(scene_or_name);\r\n\r\n        return setScene(scene, scene_or_name);\r\n      } catch (err) {\r\n        console.error(`No such scene: \"${scene_or_name}\"`);\r\n        return;\r\n      }\r\n    }\r\n\r\n    const scene = scenes.find(scene_or_name);\r\n\r\n    if (scene) return scene;\r\n\r\n    return setScene(scene);\r\n  };\r\n\r\n  const setScene = (scene, name) => {\r\n    if (!name) name = scene.displayName;\r\n\r\n    setScenes({ [name]: scene });\r\n\r\n    return scene;\r\n  };\r\n\r\n  return {\r\n    scenes,\r\n    getScene,\r\n    get: getScene,\r\n    setScene,\r\n    set: setScene\r\n  };\r\n};\r\n\r\nexport function App() {\r\n  const { scenes } = useScenes(\"BlockEditor\");\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header>\r\n        <h2>Berlin Editor</h2>\r\n      </header>\r\n      {scenes}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n/* export default () => (\r\n  <div className=\"app\">\r\n    <h1>{process.env.SANDBOX_URL}</h1>\r\n  </div>\r\n); */\r\n"]},"metadata":{},"sourceType":"module"}