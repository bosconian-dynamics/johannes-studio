{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { createElement } from \"@wordpress/element\";\nimport { SelectControl, __experimentalInputControl as InputControl } from \"@wordpress/components\";\nimport { InspectorControls, useBlockProps } from \"@wordpress/block-editor\";\nimport { useEffect, useState, useMemo } from \"@wordpress/element\";\n\nconst defaultChangeHandler = (value, {\n  setValue\n}, prev) => setValue(value);\n\nconst CONTROL_PROP_TRANSFORMS = [[InputControl, (props, schema) => props], [SelectControl, (props, schema) => {\n  var _ref, _schema$default, _props$options$;\n\n  if (props.options) {\n    if (!Array.isArray(props.options)) {\n      props.options = Object.entries(props.options).map(([label, value]) => ({\n        label,\n        value\n      }));\n    }\n  } else {\n    if (schema.enum) {\n      props.options = schema.enum.map(value => ({\n        value,\n        label: value[0].toUpperCase() + value.substr(1)\n      }));\n    }\n\n    if (!props.required) {\n      props.options.unshift({\n        value: null,\n        label: \"(none)\"\n      });\n    }\n  }\n\n  if (!props.value) props.value = (_ref = (_schema$default = schema.default) !== null && _schema$default !== void 0 ? _schema$default : (_props$options$ = props.options[0]) === null || _props$options$ === void 0 ? void 0 : _props$options$.value) !== null && _ref !== void 0 ? _ref : null;\n  return props;\n}]];\n\nconst useRepo = (defaults = {}) => {\n  _s();\n\n  const [keys, setKeys] = useState(Array.isArray(defaults) ? defaults.map(([key]) => key) : Object.keys(defaults));\n  const [values, setValues] = useState(Array.isArray(defaults) ? defaults.map(item => item.value) : Object.values(defaults));\n  return useMemo(() => new Proxy({\n    items: {},\n    has: key => typeof key === \"number\" ? values[key] !== undefined : keys.includes(key),\n    includes: value => values.includes(value),\n    indexOf: value => values.indexOf(value),\n    get: key => typeof key === \"number\" ? values[key] : values[keys.indexOf(key)],\n    set: (key, value) => {\n      const index = typeof key === \"number\" ? key : keys.indexOf(key);\n\n      if (index > 0) {\n        setValues(values.map((v, i) => i === index ? value : v));\n      } else {\n        setValues(values.concat(value));\n        setKeys(keys.concat(key));\n      }\n\n      return value;\n    },\n    add: (key_object_entries, value) => {\n      if ([\"string\", \"number\"].includes(typeof key_object_entries)) {\n        if (this.has(key_object_entries)) return;\n        return this.set(key_object_entries, value);\n      }\n\n      if (\"object\" === typeof key_object_entries) {\n        if (!(key_object_entries instanceof Array)) key_object_entries = Object.entries(key_object_entries);\n        return key_object_entries.map(([key, v]) => this.add(key, v));\n      }\n\n      throw new TypeError(\"Unknown argument type\");\n    },\n\n    *[Symbol.iterator]() {\n      for (let i = 0; i < keys.length; i++) yield [keys[i], values[i]];\n    }\n\n  }, {\n    get: (api, prop, receiver) => {\n      if (api.hasOwnProperty(prop)) return api[prop];\n\n      switch (prop) {\n        case \"length\":\n          return keys.length;\n\n        default:\n          return api.get(prop);\n      }\n    },\n    set: (api, prop, value) => api.hasOwnProperty(prop) ? api[prop] = value : api.set(prop, value)\n  }), [keys, values]);\n};\n\n_s(useRepo, \"ngInU7c/Dk97pqwusgVdCf4d1nM=\");\n\nconst useTransforms = (Component, schema) => {\n  _s2();\n\n  const registry = useRepo(CONTROL_PROP_TRANSFORMS);\n  const [queue, setQueue] = useState([]);\n  useEffect(() => {\n    const tx = [];\n    if (registry[Component] && !queue.includes(registry[Component])) tx.push([...queue, registry[Component]]);\n    if (tx.length) setQueue(queue => [...queue, ...tx]);\n  }, [registry, Component, schema]);\n  const api = {\n    registry,\n    queue,\n    add: key => {\n      const transform = registry[key];\n\n      if (transform) {\n        if (!queue.includes(transform)) setQueue([...queue, transform]);\n        return;\n      }\n\n      if (\"function\" === typeof key) {\n        registry.add(key, key);\n        setQueue([...queue, key]);\n        return;\n      }\n\n      throw new TypeError(\"Unknown key type.\");\n    },\n    register: registry.add.bind(registry),\n\n    apply(props = {}) {\n      for (const transform of queue) props = transform(props, schema);\n\n      return props;\n    }\n\n  };\n  return api;\n};\n\n_s2(useTransforms, \"2u2vThus7ufhjIcv0XLIsOUyRMs=\", false, function () {\n  return [useRepo];\n});\n\nconst useControlProps = (Component, schema, props = {}) => {\n  _s3();\n\n  const transforms = useTransforms(Component, schema);\n  const [control_props, setControlProps] = useState(props);\n  useEffect(() => {\n    setControlProps(transforms.apply(props));\n  }, [transforms, props]);\n  return {\n    control_props,\n    transforms,\n    setControlProps\n  };\n};\n\n_s3(useControlProps, \"sCYMugTgXJMaR5TphIUQyYjGP9g=\", false, function () {\n  return [useTransforms];\n});\n\nexport const BlockControl = ({\n  name,\n  schema,\n  val\n}) => {\n  _s4();\n\n  var _ref2, _control_props$onChan;\n\n  const [value, setValue] = useState(val !== null && val !== void 0 ? val : schema.default);\n  const [Component, setComponent] = useState();\n  const {\n    control_props,\n    setControlProps\n  } = useControlProps(Component, schema, {\n    key: name,\n    value\n  });\n  const [onChange, setOnChange] = useState((_ref2 = (_control_props$onChan = control_props.onChange) !== null && _control_props$onChan !== void 0 ? _control_props$onChan : schema.onChange) !== null && _ref2 !== void 0 ? _ref2 : defaultChangeHandler);\n  useEffect(() => {\n    if (Component || !schema.control) return;\n    if (schema.control.component) setComponent(schema.control.component);\n    if (schema.type === \"string\") setComponent(schema.enum ? SelectControl : InputControl);\n  }, [Component, schema]);\n  return createElement(Component, _extends({}, control_props, {\n    onChange: v => onChange(v, setValue, value)\n  }));\n};\n\n_s4(BlockControl, \"Qxz5BFZvG63odd4gSiLmvB8Cg98=\", false, function () {\n  return [useControlProps];\n});\n\n_c = BlockControl;\nexport const useBlockControls = (manifest, props = {}) => {\n  _s5();\n\n  const [controls, setControls] = useState([]);\n  useEffect(() => {\n    const controls = [];\n\n    for (const [name, schema] of Object.entries(manifest.attributes)) controls[name] = createElement(BlockControl, _extends({\n      name: name,\n      schema: schema\n    }, props));\n\n    setControls(controls);\n  }, [manifest.attributes, props]);\n  controls.set = setControls;\n  return controls;\n};\n\n_s5(useBlockControls, \"RNBpB9wXusRg14m9Szej+ZStNjw=\");\n\nexport const ComponentBlock = ({\n  component: Component,\n  manifest,\n  children,\n  ...props\n}) => {\n  _s6();\n\n  return createElement(\"div\", useBlockProps(), createElement(InspectorControls, null, useBlockControls(manifest)), createElement(Component, props, children));\n};\n\n_s6(ComponentBlock, \"bmr1FMxFcuE1raTMkZOrGqayBf8=\", false, function () {\n  return [useBlockProps, useBlockControls];\n});\n\n_c2 = ComponentBlock;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlockControl\");\n$RefreshReg$(_c2, \"ComponentBlock\");","map":{"version":3,"sources":["/sandbox/src/lib/block-utils.js"],"names":["SelectControl","__experimentalInputControl","InputControl","InspectorControls","useBlockProps","useEffect","useState","useMemo","defaultChangeHandler","value","setValue","prev","CONTROL_PROP_TRANSFORMS","props","schema","options","Array","isArray","Object","entries","map","label","enum","toUpperCase","substr","required","unshift","default","useRepo","defaults","keys","setKeys","key","values","setValues","item","Proxy","items","has","undefined","includes","indexOf","get","set","index","v","i","concat","add","key_object_entries","TypeError","Symbol","iterator","length","api","prop","receiver","hasOwnProperty","useTransforms","Component","registry","queue","setQueue","tx","push","transform","register","bind","apply","useControlProps","transforms","control_props","setControlProps","BlockControl","name","val","setComponent","onChange","setOnChange","control","component","type","useBlockControls","manifest","controls","setControls","attributes","ComponentBlock","children"],"mappings":";;;;;;;;;;AAAA,SACEA,aADF,EAEEC,0BAA0B,IAAIC,YAFhC,QAGO,uBAHP;AAIA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,yBAAjD;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,oBAA7C;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,EAAsBC,IAAtB,KAA+BD,QAAQ,CAACD,KAAD,CAApE;;AAEA,MAAMG,uBAAuB,GAAG,CAC9B,CAACV,YAAD,EAAe,CAACW,KAAD,EAAQC,MAAR,KAAmBD,KAAlC,CAD8B,EAE9B,CACEb,aADF,EAEE,CAACa,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AACjB,MAAID,KAAK,CAACE,OAAV,EAAmB;AACjB,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,KAAK,CAACE,OAApB,CAAL,EAAmC;AACjCF,MAAAA,KAAK,CAACE,OAAN,GAAgBG,MAAM,CAACC,OAAP,CACdN,KAAK,CAACE,OADQ,EAEdK,GAFc,CAEV,CAAC,CAACC,KAAD,EAAQZ,KAAR,CAAD,MAAqB;AAAEY,QAAAA,KAAF;AAASZ,QAAAA;AAAT,OAArB,CAFU,CAAhB;AAGD;AACF,GAND,MAMO;AACL,QAAIK,MAAM,CAACQ,IAAX,EAAiB;AACfT,MAAAA,KAAK,CAACE,OAAN,GAAgBD,MAAM,CAACQ,IAAP,CAAYF,GAAZ,CAAiBX,KAAD,KAAY;AAC1CA,QAAAA,KAD0C;AAE1CY,QAAAA,KAAK,EAAEZ,KAAK,CAAC,CAAD,CAAL,CAASc,WAAT,KAAyBd,KAAK,CAACe,MAAN,CAAa,CAAb;AAFU,OAAZ,CAAhB,CAAhB;AAID;;AAED,QAAI,CAACX,KAAK,CAACY,QAAX,EAAqB;AACnBZ,MAAAA,KAAK,CAACE,OAAN,CAAcW,OAAd,CAAsB;AACpBjB,QAAAA,KAAK,EAAE,IADa;AAEpBY,QAAAA,KAAK,EAAE;AAFa,OAAtB;AAID;AACF;;AAED,MAAI,CAACR,KAAK,CAACJ,KAAX,EACEI,KAAK,CAACJ,KAAN,8BAAcK,MAAM,CAACa,OAArB,gFAAgCd,KAAK,CAACE,OAAN,CAAc,CAAd,CAAhC,oDAAgC,gBAAkBN,KAAlD,uCAA2D,IAA3D;AAEF,SAAOI,KAAP;AACD,CA7BH,CAF8B,CAAhC;;AAmCA,MAAMe,OAAO,GAAG,CAACC,QAAQ,GAAG,EAAZ,KAAmB;AAAA;;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAC9BU,KAAK,CAACC,OAAN,CAAcY,QAAd,IACIA,QAAQ,CAACT,GAAT,CAAa,CAAC,CAACY,GAAD,CAAD,KAAWA,GAAxB,CADJ,GAEId,MAAM,CAACY,IAAP,CAAYD,QAAZ,CAH0B,CAAhC;AAKA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsB5B,QAAQ,CAClCU,KAAK,CAACC,OAAN,CAAcY,QAAd,IACIA,QAAQ,CAACT,GAAT,CAAce,IAAD,IAAUA,IAAI,CAAC1B,KAA5B,CADJ,GAEIS,MAAM,CAACe,MAAP,CAAcJ,QAAd,CAH8B,CAApC;AAMA,SAAOtB,OAAO,CACZ,MACE,IAAI6B,KAAJ,CACE;AACEC,IAAAA,KAAK,EAAE,EADT;AAGEC,IAAAA,GAAG,EAAGN,GAAD,IACH,OAAOA,GAAP,KAAe,QAAf,GACIC,MAAM,CAACD,GAAD,CAAN,KAAgBO,SADpB,GAEIT,IAAI,CAACU,QAAL,CAAcR,GAAd,CANR;AAQEQ,IAAAA,QAAQ,EAAG/B,KAAD,IAAWwB,MAAM,CAACO,QAAP,CAAgB/B,KAAhB,CARvB;AAUEgC,IAAAA,OAAO,EAAGhC,KAAD,IAAWwB,MAAM,CAACQ,OAAP,CAAehC,KAAf,CAVtB;AAYEiC,IAAAA,GAAG,EAAGV,GAAD,IACH,OAAOA,GAAP,KAAe,QAAf,GAA0BC,MAAM,CAACD,GAAD,CAAhC,GAAwCC,MAAM,CAACH,IAAI,CAACW,OAAL,CAAaT,GAAb,CAAD,CAblD;AAeEW,IAAAA,GAAG,EAAE,CAACX,GAAD,EAAMvB,KAAN,KAAgB;AACnB,YAAMmC,KAAK,GAAG,OAAOZ,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCF,IAAI,CAACW,OAAL,CAAaT,GAAb,CAA9C;;AAEA,UAAIY,KAAK,GAAG,CAAZ,EAAe;AACbV,QAAAA,SAAS,CAACD,MAAM,CAACb,GAAP,CAAW,CAACyB,CAAD,EAAIC,CAAJ,KAAWA,CAAC,KAAKF,KAAN,GAAcnC,KAAd,GAAsBoC,CAA5C,CAAD,CAAT;AACD,OAFD,MAEO;AACLX,QAAAA,SAAS,CAACD,MAAM,CAACc,MAAP,CAActC,KAAd,CAAD,CAAT;AACAsB,QAAAA,OAAO,CAACD,IAAI,CAACiB,MAAL,CAAYf,GAAZ,CAAD,CAAP;AACD;;AAED,aAAOvB,KAAP;AACD,KA1BH;AA4BEuC,IAAAA,GAAG,EAAE,CAACC,kBAAD,EAAqBxC,KAArB,KAA+B;AAClC,UAAI,CAAC,QAAD,EAAW,QAAX,EAAqB+B,QAArB,CAA8B,OAAOS,kBAArC,CAAJ,EAA8D;AAC5D,YAAI,KAAKX,GAAL,CAASW,kBAAT,CAAJ,EAAkC;AAElC,eAAO,KAAKN,GAAL,CAASM,kBAAT,EAA6BxC,KAA7B,CAAP;AACD;;AAED,UAAI,aAAa,OAAOwC,kBAAxB,EAA4C;AAC1C,YAAI,EAAEA,kBAAkB,YAAYjC,KAAhC,CAAJ,EACEiC,kBAAkB,GAAG/B,MAAM,CAACC,OAAP,CAAe8B,kBAAf,CAArB;AAEF,eAAOA,kBAAkB,CAAC7B,GAAnB,CAAuB,CAAC,CAACY,GAAD,EAAMa,CAAN,CAAD,KAAc,KAAKG,GAAL,CAAShB,GAAT,EAAca,CAAd,CAArC,CAAP;AACD;;AAED,YAAM,IAAIK,SAAJ,CAAc,uBAAd,CAAN;AACD,KA3CH;;AA6CE,MAAEC,MAAM,CAACC,QAAT,IAAqB;AACnB,WAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,IAAI,CAACuB,MAAzB,EAAiCP,CAAC,EAAlC,EAAsC,MAAM,CAAChB,IAAI,CAACgB,CAAD,CAAL,EAAUb,MAAM,CAACa,CAAD,CAAhB,CAAN;AACvC;;AA/CH,GADF,EAkDE;AACEJ,IAAAA,GAAG,EAAE,CAACY,GAAD,EAAMC,IAAN,EAAYC,QAAZ,KAAyB;AAC5B,UAAIF,GAAG,CAACG,cAAJ,CAAmBF,IAAnB,CAAJ,EAA8B,OAAOD,GAAG,CAACC,IAAD,CAAV;;AAE9B,cAAQA,IAAR;AACE,aAAK,QAAL;AACE,iBAAOzB,IAAI,CAACuB,MAAZ;;AAEF;AACE,iBAAOC,GAAG,CAACZ,GAAJ,CAAQa,IAAR,CAAP;AALJ;AAOD,KAXH;AAYEZ,IAAAA,GAAG,EAAE,CAACW,GAAD,EAAMC,IAAN,EAAY9C,KAAZ,KACH6C,GAAG,CAACG,cAAJ,CAAmBF,IAAnB,IACKD,GAAG,CAACC,IAAD,CAAH,GAAY9C,KADjB,GAEI6C,GAAG,CAACX,GAAJ,CAAQY,IAAR,EAAc9C,KAAd;AAfR,GAlDF,CAFU,EAsEZ,CAACqB,IAAD,EAAOG,MAAP,CAtEY,CAAd;AAwED,CApFD;;GAAML,O;;AAsFN,MAAM8B,aAAa,GAAG,CAACC,SAAD,EAAY7C,MAAZ,KAAuB;AAAA;;AAC3C,QAAM8C,QAAQ,GAAGhC,OAAO,CAAChB,uBAAD,CAAxB;AACA,QAAM,CAACiD,KAAD,EAAQC,QAAR,IAAoBxD,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0D,EAAE,GAAG,EAAX;AAEA,QAAIH,QAAQ,CAACD,SAAD,CAAR,IAAuB,CAACE,KAAK,CAACrB,QAAN,CAAeoB,QAAQ,CAACD,SAAD,CAAvB,CAA5B,EACEI,EAAE,CAACC,IAAH,CAAQ,CAAC,GAAGH,KAAJ,EAAWD,QAAQ,CAACD,SAAD,CAAnB,CAAR;AAEF,QAAII,EAAE,CAACV,MAAP,EAAeS,QAAQ,CAAED,KAAD,IAAW,CAAC,GAAGA,KAAJ,EAAW,GAAGE,EAAd,CAAZ,CAAR;AAChB,GAPQ,EAON,CAACH,QAAD,EAAWD,SAAX,EAAsB7C,MAAtB,CAPM,CAAT;AASA,QAAMwC,GAAG,GAAG;AACVM,IAAAA,QADU;AAEVC,IAAAA,KAFU;AAGVb,IAAAA,GAAG,EAAGhB,GAAD,IAAS;AACZ,YAAMiC,SAAS,GAAGL,QAAQ,CAAC5B,GAAD,CAA1B;;AAEA,UAAIiC,SAAJ,EAAe;AACb,YAAI,CAACJ,KAAK,CAACrB,QAAN,CAAeyB,SAAf,CAAL,EAAgCH,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWI,SAAX,CAAD,CAAR;AAEhC;AACD;;AAED,UAAI,eAAe,OAAOjC,GAA1B,EAA+B;AAC7B4B,QAAAA,QAAQ,CAACZ,GAAT,CAAahB,GAAb,EAAkBA,GAAlB;AAEA8B,QAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW7B,GAAX,CAAD,CAAR;AAEA;AACD;;AAED,YAAM,IAAIkB,SAAJ,CAAc,mBAAd,CAAN;AACD,KArBS;AAsBVgB,IAAAA,QAAQ,EAAEN,QAAQ,CAACZ,GAAT,CAAamB,IAAb,CAAkBP,QAAlB,CAtBA;;AAuBVQ,IAAAA,KAAK,CAACvD,KAAK,GAAG,EAAT,EAAa;AAChB,WAAK,MAAMoD,SAAX,IAAwBJ,KAAxB,EAA+BhD,KAAK,GAAGoD,SAAS,CAACpD,KAAD,EAAQC,MAAR,CAAjB;;AAE/B,aAAOD,KAAP;AACD;;AA3BS,GAAZ;AA8BA,SAAOyC,GAAP;AACD,CA5CD;;IAAMI,a;UACa9B,O;;;AA6CnB,MAAMyC,eAAe,GAAG,CAACV,SAAD,EAAY7C,MAAZ,EAAoBD,KAAK,GAAG,EAA5B,KAAmC;AAAA;;AACzD,QAAMyD,UAAU,GAAGZ,aAAa,CAACC,SAAD,EAAY7C,MAAZ,CAAhC;AACA,QAAM,CAACyD,aAAD,EAAgBC,eAAhB,IAAmClE,QAAQ,CAACO,KAAD,CAAjD;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdmE,IAAAA,eAAe,CAACF,UAAU,CAACF,KAAX,CAAiBvD,KAAjB,CAAD,CAAf;AACD,GAFQ,EAEN,CAACyD,UAAD,EAAazD,KAAb,CAFM,CAAT;AAIA,SAAO;AACL0D,IAAAA,aADK;AAELD,IAAAA,UAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAbD;;IAAMH,e;UACeX,a;;;AAcrB,OAAO,MAAMe,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQ5D,EAAAA,MAAR;AAAgB6D,EAAAA;AAAhB,CAAD,KAA2B;AAAA;;AAAA;;AACrD,QAAM,CAAClE,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAACqE,GAAD,aAACA,GAAD,cAACA,GAAD,GAAQ7D,MAAM,CAACa,OAAf,CAAlC;AACA,QAAM,CAACgC,SAAD,EAAYiB,YAAZ,IAA4BtE,QAAQ,EAA1C;AACA,QAAM;AAAEiE,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAqCH,eAAe,CACxDV,SADwD,EAExD7C,MAFwD,EAGxD;AACEkB,IAAAA,GAAG,EAAE0C,IADP;AAEEjE,IAAAA;AAFF,GAHwD,CAA1D;AAQA,QAAM,CAACoE,QAAD,EAAWC,WAAX,IAA0BxE,QAAQ,mCACtCiE,aAAa,CAACM,QADwB,yEACZ/D,MAAM,CAAC+D,QADK,yCACOrE,oBADP,CAAxC;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsD,SAAS,IAAI,CAAC7C,MAAM,CAACiE,OAAzB,EAAkC;AAElC,QAAIjE,MAAM,CAACiE,OAAP,CAAeC,SAAnB,EAA8BJ,YAAY,CAAC9D,MAAM,CAACiE,OAAP,CAAeC,SAAhB,CAAZ;AAE9B,QAAIlE,MAAM,CAACmE,IAAP,KAAgB,QAApB,EACEL,YAAY,CAAC9D,MAAM,CAACQ,IAAP,GAActB,aAAd,GAA8BE,YAA/B,CAAZ;AACH,GAPQ,EAON,CAACyD,SAAD,EAAY7C,MAAZ,CAPM,CAAT;AASA,SACE,cAAC,SAAD,eACMyD,aADN;AAEE,IAAA,QAAQ,EAAG1B,CAAD,IAAOgC,QAAQ,CAAChC,CAAD,EAAInC,QAAJ,EAAcD,KAAd;AAF3B,KADF;AAMD,CA9BM;;IAAMgE,Y;UAGgCJ,e;;;KAHhCI,Y;AAgCb,OAAO,MAAMS,gBAAgB,GAAG,CAACC,QAAD,EAAWtE,KAAK,GAAG,EAAnB,KAA0B;AAAA;;AACxD,QAAM,CAACuE,QAAD,EAAWC,WAAX,IAA0B/E,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+E,QAAQ,GAAG,EAAjB;;AAEA,SAAK,MAAM,CAACV,IAAD,EAAO5D,MAAP,CAAX,IAA6BI,MAAM,CAACC,OAAP,CAAegE,QAAQ,CAACG,UAAxB,CAA7B,EACEF,QAAQ,CAACV,IAAD,CAAR,GAAiB,cAAC,YAAD;AAAc,MAAA,IAAI,EAAEA,IAApB;AAA0B,MAAA,MAAM,EAAE5D;AAAlC,OAA8CD,KAA9C,EAAjB;;AAEFwE,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAPQ,EAON,CAACD,QAAQ,CAACG,UAAV,EAAsBzE,KAAtB,CAPM,CAAT;AASAuE,EAAAA,QAAQ,CAACzC,GAAT,GAAe0C,WAAf;AAEA,SAAOD,QAAP;AACD,CAfM;;IAAMF,gB;;AAiBb,OAAO,MAAMK,cAAc,GAAG,CAAC;AAC7BP,EAAAA,SAAS,EAAErB,SADkB;AAE7BwB,EAAAA,QAF6B;AAG7BK,EAAAA,QAH6B;AAI7B,KAAG3E;AAJ0B,CAAD;AAAA;;AAAA,SAM5B,qBAAST,aAAa,EAAtB,EACE,cAAC,iBAAD,QAAoB8E,gBAAgB,CAACC,QAAD,CAApC,CADF,EAEE,cAAC,SAAD,EAAetE,KAAf,EAAuB2E,QAAvB,CAFF,CAN4B;AAAA,CAAvB;;IAAMD,c;UAMFnF,a,EACa8E,gB;;;MAPXK,c","sourcesContent":["import {\r\n  SelectControl,\r\n  __experimentalInputControl as InputControl\r\n} from \"@wordpress/components\";\r\nimport { InspectorControls, useBlockProps } from \"@wordpress/block-editor\";\r\nimport { useEffect, useState, useMemo } from \"@wordpress/element\";\r\n\r\nconst defaultChangeHandler = (value, { setValue }, prev) => setValue(value);\r\n\r\nconst CONTROL_PROP_TRANSFORMS = [\r\n  [InputControl, (props, schema) => props],\r\n  [\r\n    SelectControl,\r\n    (props, schema) => {\r\n      if (props.options) {\r\n        if (!Array.isArray(props.options)) {\r\n          props.options = Object.entries(\r\n            props.options\r\n          ).map(([label, value]) => ({ label, value }));\r\n        }\r\n      } else {\r\n        if (schema.enum) {\r\n          props.options = schema.enum.map((value) => ({\r\n            value,\r\n            label: value[0].toUpperCase() + value.substr(1)\r\n          }));\r\n        }\r\n\r\n        if (!props.required) {\r\n          props.options.unshift({\r\n            value: null,\r\n            label: \"(none)\"\r\n          });\r\n        }\r\n      }\r\n\r\n      if (!props.value)\r\n        props.value = schema.default ?? props.options[0]?.value ?? null;\r\n\r\n      return props;\r\n    }\r\n  ]\r\n];\r\n\r\nconst useRepo = (defaults = {}) => {\r\n  const [keys, setKeys] = useState(\r\n    Array.isArray(defaults)\r\n      ? defaults.map(([key]) => key)\r\n      : Object.keys(defaults)\r\n  );\r\n  const [values, setValues] = useState(\r\n    Array.isArray(defaults)\r\n      ? defaults.map((item) => item.value)\r\n      : Object.values(defaults)\r\n  );\r\n\r\n  return useMemo(\r\n    () =>\r\n      new Proxy(\r\n        {\r\n          items: {},\r\n\r\n          has: (key) =>\r\n            typeof key === \"number\"\r\n              ? values[key] !== undefined\r\n              : keys.includes(key),\r\n\r\n          includes: (value) => values.includes(value),\r\n\r\n          indexOf: (value) => values.indexOf(value),\r\n\r\n          get: (key) =>\r\n            typeof key === \"number\" ? values[key] : values[keys.indexOf(key)],\r\n\r\n          set: (key, value) => {\r\n            const index = typeof key === \"number\" ? key : keys.indexOf(key);\r\n\r\n            if (index > 0) {\r\n              setValues(values.map((v, i) => (i === index ? value : v)));\r\n            } else {\r\n              setValues(values.concat(value));\r\n              setKeys(keys.concat(key));\r\n            }\r\n\r\n            return value;\r\n          },\r\n\r\n          add: (key_object_entries, value) => {\r\n            if ([\"string\", \"number\"].includes(typeof key_object_entries)) {\r\n              if (this.has(key_object_entries)) return;\r\n\r\n              return this.set(key_object_entries, value);\r\n            }\r\n\r\n            if (\"object\" === typeof key_object_entries) {\r\n              if (!(key_object_entries instanceof Array))\r\n                key_object_entries = Object.entries(key_object_entries);\r\n\r\n              return key_object_entries.map(([key, v]) => this.add(key, v));\r\n            }\r\n\r\n            throw new TypeError(\"Unknown argument type\");\r\n          },\r\n\r\n          *[Symbol.iterator]() {\r\n            for (let i = 0; i < keys.length; i++) yield [keys[i], values[i]];\r\n          }\r\n        },\r\n        {\r\n          get: (api, prop, receiver) => {\r\n            if (api.hasOwnProperty(prop)) return api[prop];\r\n\r\n            switch (prop) {\r\n              case \"length\":\r\n                return keys.length;\r\n\r\n              default:\r\n                return api.get(prop);\r\n            }\r\n          },\r\n          set: (api, prop, value) =>\r\n            api.hasOwnProperty(prop)\r\n              ? (api[prop] = value)\r\n              : api.set(prop, value)\r\n        }\r\n      ),\r\n    [keys, values]\r\n  );\r\n};\r\n\r\nconst useTransforms = (Component, schema) => {\r\n  const registry = useRepo(CONTROL_PROP_TRANSFORMS);\r\n  const [queue, setQueue] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const tx = [];\r\n\r\n    if (registry[Component] && !queue.includes(registry[Component]))\r\n      tx.push([...queue, registry[Component]]);\r\n\r\n    if (tx.length) setQueue((queue) => [...queue, ...tx]);\r\n  }, [registry, Component, schema]);\r\n\r\n  const api = {\r\n    registry,\r\n    queue,\r\n    add: (key) => {\r\n      const transform = registry[key];\r\n\r\n      if (transform) {\r\n        if (!queue.includes(transform)) setQueue([...queue, transform]);\r\n\r\n        return;\r\n      }\r\n\r\n      if (\"function\" === typeof key) {\r\n        registry.add(key, key);\r\n\r\n        setQueue([...queue, key]);\r\n\r\n        return;\r\n      }\r\n\r\n      throw new TypeError(\"Unknown key type.\");\r\n    },\r\n    register: registry.add.bind(registry),\r\n    apply(props = {}) {\r\n      for (const transform of queue) props = transform(props, schema);\r\n\r\n      return props;\r\n    }\r\n  };\r\n\r\n  return api;\r\n};\r\n\r\nconst useControlProps = (Component, schema, props = {}) => {\r\n  const transforms = useTransforms(Component, schema);\r\n  const [control_props, setControlProps] = useState(props);\r\n\r\n  useEffect(() => {\r\n    setControlProps(transforms.apply(props));\r\n  }, [transforms, props]);\r\n\r\n  return {\r\n    control_props,\r\n    transforms,\r\n    setControlProps\r\n  };\r\n};\r\n\r\nexport const BlockControl = ({ name, schema, val }) => {\r\n  const [value, setValue] = useState(val ?? schema.default);\r\n  const [Component, setComponent] = useState();\r\n  const { control_props, setControlProps } = useControlProps(\r\n    Component,\r\n    schema,\r\n    {\r\n      key: name,\r\n      value\r\n    }\r\n  );\r\n  const [onChange, setOnChange] = useState(\r\n    control_props.onChange ?? schema.onChange ?? defaultChangeHandler\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (Component || !schema.control) return;\r\n\r\n    if (schema.control.component) setComponent(schema.control.component);\r\n\r\n    if (schema.type === \"string\")\r\n      setComponent(schema.enum ? SelectControl : InputControl);\r\n  }, [Component, schema]);\r\n\r\n  return (\r\n    <Component\r\n      {...control_props}\r\n      onChange={(v) => onChange(v, setValue, value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport const useBlockControls = (manifest, props = {}) => {\r\n  const [controls, setControls] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const controls = [];\r\n\r\n    for (const [name, schema] of Object.entries(manifest.attributes))\r\n      controls[name] = <BlockControl name={name} schema={schema} {...props} />;\r\n\r\n    setControls(controls);\r\n  }, [manifest.attributes, props]);\r\n\r\n  controls.set = setControls;\r\n\r\n  return controls;\r\n};\r\n\r\nexport const ComponentBlock = ({\r\n  component: Component,\r\n  manifest,\r\n  children,\r\n  ...props\r\n}) => (\r\n  <div {...useBlockProps()}>\r\n    <InspectorControls>{useBlockControls(manifest)}</InspectorControls>\r\n    <Component {...props}>{children}</Component>\r\n  </div>\r\n);\r\n"]},"metadata":{},"sourceType":"module"}