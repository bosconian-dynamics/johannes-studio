{"ast":null,"code":"import createReduxRoutineMiddleware from \"@wordpress/redux-routine\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { createReduxStore } from \"@wordpress/data\";\nexport { register as registerStore } from \"@wordpress/data\";\nexport const createStore = (name, options = {}) => {\n  let {\n    actions,\n    reducers,\n    controls = {},\n    middleware = [],\n    preloadedState = {},\n    initialState = {},\n    devTools = true\n  } = options;\n  middleware = typeof middleware === \"function\" ? getDefaultMiddleware => middleware([...getDefaultMiddleware(), createControlsMiddleware(controls)]) : getDefaultMiddleware => [...getDefaultMiddleware(), createControlsMiddleware(controls), ...middleware];\n  preloadedState = { ...initialState,\n    ...preloadedState\n  };\n  return {\n    name,\n    instantiate: () => {\n      /*       const store = configureStore({\r\n        reducer: reducers,\r\n        middleware,\r\n        devTools,\r\n        preloadedState\r\n      }); */\n      const store = createReduxStore(name, {\n        reducer: reducers,\n        selectors,\n        resolvers,\n        controls,\n        actions\n      });\n\n      const subscribe = store && (listener => {\n        let lastState = store.getState().root;\n        return store.subscribe(() => {\n          const state = store.getState();\n          const hasChanged = state !== lastState;\n          lastState = state;\n\n          if (hasChanged) {\n            listener();\n          }\n        });\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/sandbox/src/lib/data/store.js"],"names":["createReduxRoutineMiddleware","configureStore","createReduxStore","register","registerStore","createStore","name","options","actions","reducers","controls","middleware","preloadedState","initialState","devTools","getDefaultMiddleware","createControlsMiddleware","instantiate","store","reducer","selectors","resolvers","subscribe","listener","lastState","getState","root","state","hasChanged"],"mappings":"AAAA,OAAOA,4BAAP,MAAyC,0BAAzC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,SAASC,QAAQ,IAAIC,aAArB,QAA0C,iBAA1C;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,OAAO,GAAG,EAAjB,KAAwB;AACjD,MAAI;AACFC,IAAAA,OADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,QAAQ,GAAG,EAHT;AAIFC,IAAAA,UAAU,GAAG,EAJX;AAKFC,IAAAA,cAAc,GAAG,EALf;AAMFC,IAAAA,YAAY,GAAG,EANb;AAOFC,IAAAA,QAAQ,GAAG;AAPT,MAQAP,OARJ;AAUAI,EAAAA,UAAU,GACR,OAAOA,UAAP,KAAsB,UAAtB,GACKI,oBAAD,IACEJ,UAAU,CAAC,CACT,GAAGI,oBAAoB,EADd,EAETC,wBAAwB,CAACN,QAAD,CAFf,CAAD,CAFhB,GAMKK,oBAAD,IAA0B,CACxB,GAAGA,oBAAoB,EADC,EAExBC,wBAAwB,CAACN,QAAD,CAFA,EAGxB,GAAGC,UAHqB,CAPhC;AAaAC,EAAAA,cAAc,GAAG,EACf,GAAGC,YADY;AAEf,OAAGD;AAFY,GAAjB;AAKA,SAAO;AACLN,IAAAA,IADK;AAELW,IAAAA,WAAW,EAAE,MAAM;AACjB;AACN;AACA;AACA;AACA;AACA;AAEM,YAAMC,KAAK,GAAGhB,gBAAgB,CAACI,IAAD,EAAO;AACnCa,QAAAA,OAAO,EAAEV,QAD0B;AAEnCW,QAAAA,SAFmC;AAGnCC,QAAAA,SAHmC;AAInCX,QAAAA,QAJmC;AAKnCF,QAAAA;AALmC,OAAP,CAA9B;;AAQA,YAAMc,SAAS,GACbJ,KAAK,KACHK,QAAD,IAAc;AACb,YAAIC,SAAS,GAAGN,KAAK,CAACO,QAAN,GAAiBC,IAAjC;AAEA,eAAOR,KAAK,CAACI,SAAN,CAAgB,MAAM;AAC3B,gBAAMK,KAAK,GAAGT,KAAK,CAACO,QAAN,EAAd;AACA,gBAAMG,UAAU,GAAGD,KAAK,KAAKH,SAA7B;AACAA,UAAAA,SAAS,GAAGG,KAAZ;;AAEA,cAAIC,UAAJ,EAAgB;AACdL,YAAAA,QAAQ;AACT;AACF,SARM,CAAP;AASD,OAbI,CADP;AAeD;AAjCI,GAAP;AAmCD,CAhEM","sourcesContent":["import createReduxRoutineMiddleware from \"@wordpress/redux-routine\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { createReduxStore } from \"@wordpress/data\";\r\n\r\nexport { register as registerStore } from \"@wordpress/data\";\r\n\r\nexport const createStore = (name, options = {}) => {\r\n  let {\r\n    actions,\r\n    reducers,\r\n    controls = {},\r\n    middleware = [],\r\n    preloadedState = {},\r\n    initialState = {},\r\n    devTools = true\r\n  } = options;\r\n\r\n  middleware =\r\n    typeof middleware === \"function\"\r\n      ? (getDefaultMiddleware) =>\r\n          middleware([\r\n            ...getDefaultMiddleware(),\r\n            createControlsMiddleware(controls)\r\n          ])\r\n      : (getDefaultMiddleware) => [\r\n          ...getDefaultMiddleware(),\r\n          createControlsMiddleware(controls),\r\n          ...middleware\r\n        ];\r\n\r\n  preloadedState = {\r\n    ...initialState,\r\n    ...preloadedState\r\n  };\r\n\r\n  return {\r\n    name,\r\n    instantiate: () => {\r\n      /*       const store = configureStore({\r\n        reducer: reducers,\r\n        middleware,\r\n        devTools,\r\n        preloadedState\r\n      }); */\r\n\r\n      const store = createReduxStore(name, {\r\n        reducer: reducers,\r\n        selectors,\r\n        resolvers,\r\n        controls,\r\n        actions\r\n      });\r\n\r\n      const subscribe =\r\n        store &&\r\n        ((listener) => {\r\n          let lastState = store.getState().root;\r\n\r\n          return store.subscribe(() => {\r\n            const state = store.getState();\r\n            const hasChanged = state !== lastState;\r\n            lastState = state;\r\n\r\n            if (hasChanged) {\r\n              listener();\r\n            }\r\n          });\r\n        });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}