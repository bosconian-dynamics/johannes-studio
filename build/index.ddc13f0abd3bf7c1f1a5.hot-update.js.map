{"version":3,"sources":["webpack:///./lib/data/index.js","webpack:///./lib/data/slice/index.js"],"names":["combineReducers","reducer_maps","reducer_map","length","Object","assign","state","key","reducer","entries","defaultCombineReducers","matchesSlicePath","path","toString","action","action_path","meta","slice","startsWith"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;CAIA;;AACA;AACA;AAEO,MAAMA,eAAe,GAAG,CAAC,GAAGC,YAAJ,KAAqB;AAClD,QAAMC,WAAW,GACfD,YAAY,CAACE,MAAb,GAAsB,CAAtB,GACIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,GAAGJ,YAArB,CADJ,GAEIA,YAAY,CAAC,CAAD,CAHlB;AAKA,MAAI,CAACC,WAAL,EAAkB,OAAQI,KAAD,IAAWA,KAAlB;;AAElB,OAAK,MAAM,CAACC,GAAD,EAAMC,OAAN,CAAX,IAA6BJ,MAAM,CAACK,OAAP,CAAeP,WAAf,CAA7B,EAA0D;AACxD,QAAI,aAAa,OAAOM,OAAxB,EACEN,WAAW,CAACK,GAAD,CAAX,GAAmBP,eAAe,CAACQ,OAAD,CAAlC;AACH;;AAED,SAAOE,uEAAsB,CAACR,WAAD,CAA7B;AACD,CAdM,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRP;AAEA;AAEA;AAEO,MAAMS,gBAAgB,GAAIC,IAAD,IAAU;AACxCA,MAAI,GAAGA,IAAI,CAACC,QAAL,EAAP;AAEA,SAAQC,MAAD,IAAY;AAAA;;AACjB,UAAMC,WAAW,mBAAGD,MAAM,CAACE,IAAV,uEAAG,aAAaC,KAAhB,uDAAG,mBAAoBL,IAAxC;AAEA,QAAI,CAACG,WAAL,EAAkB,OAAO,KAAP;AAElB,WAAOA,WAAW,CAACF,QAAZ,GAAuBK,UAAvB,CAAkCN,IAAlC,CAAP;AACD,GAND;AAOD,CAVM,C","file":"index.ddc13f0abd3bf7c1f1a5.hot-update.js","sourcesContent":["import { combineReducers as defaultCombineReducers } from \"@wordpress/data\";\r\n\r\nexport * from \"@wordpress/data\";\r\n\r\n//export * from \"./repo.js\";\r\nexport * from \"./store\";\r\nexport * from \"./slice\";\r\n\r\nexport const combineReducers = (...reducer_maps) => {\r\n  const reducer_map =\r\n    reducer_maps.length > 1\r\n      ? Object.assign({}, ...reducer_maps)\r\n      : reducer_maps[0];\r\n\r\n  if (!reducer_map) return (state) => state;\r\n\r\n  for (const [key, reducer] in Object.entries(reducer_map)) {\r\n    if (\"object\" === typeof reducer)\r\n      reducer_map[key] = combineReducers(reducer);\r\n  }\r\n\r\n  return defaultCombineReducers(reducer_map);\r\n};\r\n","import { createSlice as createReduxSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport { createReduxSlice };\r\n\r\nexport { createSlice } from \"./createSlice\";\r\n\r\nexport const matchesSlicePath = (path) => {\r\n  path = path.toString();\r\n\r\n  return (action) => {\r\n    const action_path = action.meta?.slice?.path;\r\n\r\n    if (!action_path) return false;\r\n\r\n    return action_path.toString().startsWith(path);\r\n  };\r\n};\r\n"],"sourceRoot":""}