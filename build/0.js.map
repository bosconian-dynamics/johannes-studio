{"version":3,"sources":["webpack:///./lib/scenes/index.js","webpack:///./App.jsx","webpack:///./style.scss"],"names":["importScenes","names","Promise","all","map","name","console","log","default","Scene","displayName","useActiveScene","scenes","selector","action","initial","setActiveSceneName","useDispatch","active_scene_name","useSelect","select","getActiveSceneName","dispatchAction","useMemo","index","Object","keys","indexOf","setActiveScene","scene_name_index","TypeError","scene","set","useScenes","scenes_or_names","setScenes","useState","setScene","useCallback","loadScene","scene_or_name","entries","find","includes","err","error","useEffect","App","active_scene"],"mappings":"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","file":"0.js","sourcesContent":["import {\r\n  useCallback,\r\n  useDispatch,\r\n  useEffect,\r\n  useMemo,\r\n  useSelect,\r\n  useState\r\n} from \"/lib/data\";\r\n\r\nexport const importScenes = async (...names) =>\r\n  Promise.all(\r\n    names.map(async (name) => {\r\n      console.log(\"MAP\", name);\r\n      const { default: Scene } = await import(`./scenes/${name}/index.jsx`);\r\n\r\n      if (!Scene.displayName) Scene.displayName = name;\r\n\r\n      return Scene;\r\n    })\r\n  );\r\n\r\nexport const useActiveScene = (scenes, { selector, action, initial }) => {\r\n  const { setActiveSceneName } = useDispatch();\r\n  const { active_scene_name } = useSelect((select) =>\r\n    (selector ?? select(\"sazerac/core\").getActiveSceneName)()\r\n  );\r\n\r\n  const dispatchAction = action ?? setActiveSceneName;\r\n\r\n  return useMemo(() => {\r\n    const index = Object.keys(scenes).indexOf(active_scene_name);\r\n    const setActiveScene = (scene_name_index) => {\r\n      let name;\r\n\r\n      switch (typeof scene_name_index) {\r\n        case \"number\":\r\n          name = scenes[Object.keys(scenes)[scene_name_index]].name;\r\n          break;\r\n        case \"string\":\r\n          name = scene_name_index;\r\n          break;\r\n        case \"object\":\r\n          name = scene_name_index.name;\r\n          break;\r\n        default:\r\n          throw new TypeError(\"Unkown scene resolvable.\");\r\n      }\r\n\r\n      dispatchAction(name);\r\n    };\r\n\r\n    return {\r\n      name: active_scene_name,\r\n      index,\r\n      scene: scenes[active_scene_name],\r\n      setActiveScene,\r\n      set: setActiveScene\r\n    };\r\n  }, [scenes, active_scene_name, dispatchAction]);\r\n};\r\n\r\nexport const useScenes = (...scenes_or_names) => {\r\n  const [scenes, setScenes] = useState({});\r\n\r\n  const setScene = useCallback(\r\n    (name, scene) => {\r\n      if (!name) name = scene.displayName;\r\n\r\n      setScenes({ ...scenes, [name]: scene });\r\n\r\n      return scene;\r\n    },\r\n    [scenes]\r\n  );\r\n\r\n  const loadScene = useCallback(\r\n    async (scene_or_name) => {\r\n      let scene = Object.entries(scenes).find(([name, scene]) =>\r\n        [name, scene, scene.displayName].includes(scene_or_name)\r\n      );\r\n\r\n      if (scene) return scene;\r\n\r\n      if (\"string\" === typeof scene_or_name) {\r\n        try {\r\n          [scene] = await importScenes(scene_or_name);\r\n\r\n          return setScene(scene, scene_or_name);\r\n        } catch (err) {\r\n          console.error(`No such scene: \"${scene_or_name}\" :: ${err}`);\r\n          return;\r\n        }\r\n      }\r\n\r\n      return setScene(scene);\r\n    },\r\n    [setScene, scenes]\r\n  );\r\n\r\n  useEffect(() => {\r\n    for (const scene_or_name of scenes_or_names) {\r\n      loadScene(scene_or_name);\r\n    }\r\n  }, [scenes_or_names, loadScene]);\r\n\r\n  return {\r\n    scenes,\r\n    set: setScene\r\n  };\r\n};\r\n","import { useScenes, useActiveScene } from \"/lib/scenes\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport function App() {\r\n  const { scenes } = useScenes(\"BlockEditor\");\r\n  const active_scene = useActiveScene(scenes);\r\n\r\n  console.log(\"APP RENDER\", scenes);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header>\r\n        <h2>Berlin Editor{active_scene && `: ${active_scene.name}`}</h2>\r\n      </header>\r\n      {Object.entries(scenes).map((Scene) => (\r\n        <Scene key={Scene.displayName} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport {};\n    if(module.hot) {\n      // 1626720816380\n      var cssReload = require(\"/sandbox/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}